{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","basename","process","Container","Navbar","expand","variant","bg","className","to","Brand","Nav","exact","Link","NavDropdown","title","id","Item","href","path","Home","Examples","useRouteMatch","Example","exampleId","useParams","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAee,SAASA,IACtB,OACE,kBAAC,gBAAD,CAAQC,SAAUC,cAChB,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,QAAQC,GAAG,QAAQC,UAAU,QACvD,kBAAC,gBAAD,CAAeC,GAAG,KAChB,kBAACL,EAAA,EAAOM,MAAR,oBAEF,kBAACC,EAAA,EAAD,CAAKH,UAAU,WACb,kBAAC,gBAAD,CAAeI,OAAK,EAACH,GAAG,KACtB,kBAACE,EAAA,EAAIE,KAAL,cAEF,kBAACC,EAAA,EAAD,CAAaC,MAAM,WAAWC,GAAG,sBAC/B,kBAAC,gBAAD,CAAeP,GAAG,cAChB,kBAACK,EAAA,EAAYG,KAAb,mBAEF,kBAAC,gBAAD,CAAeR,GAAG,cAChB,kBAACK,EAAA,EAAYG,KAAb,mBAEF,kBAAC,gBAAD,CAAeR,GAAG,cAChB,kBAACK,EAAA,EAAYG,KAAb,qBAIN,kBAACN,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIE,KAAL,CAAUK,KAAK,2CAAf,YAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAON,OAAK,EAACO,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YACV,kBAACE,EAAD,UASZ,SAASD,IACP,OACE,0CAIJ,SAASC,IAAY,IACbF,EAASG,cAATH,KACN,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOA,KAAI,UAAKA,EAAL,gBACT,kBAACI,EAAD,QAMR,SAASA,IAAW,IACZC,EAAcC,cAAdD,UACN,OACE,uCAAaA,GCnEGE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjC,EAAD,OAEFkC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c91815f6.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Container>\n\n        <Navbar expand=\"lg\" variant=\"light\" bg=\"light\" className=\"my-4\">\n          <LinkContainer to=\"/\">\n            <Navbar.Brand>Zonal Maps</Navbar.Brand>\n          </LinkContainer>\n          <Nav className=\"mr-auto\">\n            <LinkContainer exact to=\"/\">\n              <Nav.Link>Home</Nav.Link>\n            </LinkContainer>\n            <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n              <LinkContainer to=\"/example/1\">\n                <NavDropdown.Item>Example 1</NavDropdown.Item>\n              </LinkContainer>\n              <LinkContainer to=\"/example/2\">\n                <NavDropdown.Item>Example 2</NavDropdown.Item>\n              </LinkContainer>\n              <LinkContainer to=\"/example/3\">\n                <NavDropdown.Item>Example 3</NavDropdown.Item>\n              </LinkContainer>\n            </NavDropdown>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"https://github.com/evaldasstu/zonalmaps\">GitHub</Nav.Link>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/example\">\n            <Examples />\n          </Route>\n        </Switch>\n\n      </Container>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <h2>Zonal Maps</h2>\n  );\n}\n\nfunction Examples() {\n  let { path } = useRouteMatch();\n  return (\n    <Switch>\n      <Route path={`${path}/:exampleId`}>\n        <Example />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction Example() {\n  let { exampleId } = useParams();\n  return (\n    <h2>Example {exampleId}</h2>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}