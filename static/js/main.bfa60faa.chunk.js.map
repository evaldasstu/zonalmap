{"version":3,"sources":["components/Menu.jsx","components/EmbedCodeTextArea.jsx","components/GetEmbedCode.jsx","components/Embed.jsx","components/Example.jsx","App.js","../README.md","serviceWorker.js","index.js"],"names":["Menu","Navbar","expand","variant","bg","className","to","Brand","Nav","exact","Link","NavDropdown","title","id","Item","active","href","EmbedCodeTextArea","props","copyToClipboard","textArea","select","document","execCommand","setState","copySuccess","state","value","this","popover","Popover","Content","Form","Control","as","rows","ref","teaxtarea","OverlayTrigger","trigger","placement","overlay","rootClose","Button","onClick","React","Component","GetEmbedCode","useState","openCustomize","setOpenCustomize","displayTable","setDisplayTable","Card","Header","Body","Text","Group","controlId","Label","type","placeholder","Collapse","in","Row","Col","sm","md","lg","htmlFor","Check","label","checked","aria-controls","aria-expanded","icon","faChevronUp","faChevronDown","size","Embed","embedParams","useParams","defaultProps","Example","exampleNo","example","spreadsheetId","embedCode","spreadsheetEmbedCode","dangerouslySetInnerHTML","__html","src","App","basename","process","Container","path","Home","source","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfa60faa.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nexport default function Menu() {\n  return (\n    <Navbar expand=\"sm\" variant=\"light\" bg=\"light\" className=\"mb-4\">\n      <LinkContainer to=\"/\">\n        <Navbar.Brand>Zonal Maps</Navbar.Brand>\n      </LinkContainer>\n      <Nav className=\"mr-auto\">\n        <LinkContainer exact to=\"/\">\n          <Nav.Link>Docs</Nav.Link>\n        </LinkContainer>\n        <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n          <LinkContainer to=\"/example/1\">\n            <NavDropdown.Item>Example 1</NavDropdown.Item>\n          </LinkContainer>\n          <LinkContainer to=\"/example/2\">\n            <NavDropdown.Item>Example 2</NavDropdown.Item>\n          </LinkContainer>\n          <LinkContainer to=\"/example/3\">\n            <NavDropdown.Item>Example 3</NavDropdown.Item>\n          </LinkContainer>\n        </NavDropdown>\n        <LinkContainer to=\"/embed\">\n          <Nav.Link active={false}>Get embed code</Nav.Link>\n        </LinkContainer>\n      </Nav>\n      <Nav>\n        <Nav.Link href=\"https://github.com/evaldasstu/zonalmaps\">GitHub</Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form, Button, Popover, OverlayTrigger,\n} from 'react-bootstrap';\n\nexport default class EmbedCodeTextArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      copySuccess: false,\n    };\n  }\n\n  copyToClipboard = () => {\n    const element = this.textArea;\n    element.select();\n    document.execCommand('copy');\n    this.setState({ copySuccess: true });\n  }\n\n  render() {\n    const { value } = this.props;\n    const { copySuccess } = this.state;\n    const popover = (\n      <Popover id=\"popover-basic\">\n        <Popover.Content>\n          {copySuccess ? <div>Embed code copied to clipboard.</div> : null}\n        </Popover.Content>\n      </Popover>\n    );\n    return (\n      <>\n        <Form.Control\n          as=\"textarea\"\n          rows=\"5\"\n          ref={(teaxtarea) => { this.textArea = teaxtarea; }}\n          value={value}\n        />\n        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover} rootClose=\"true\">\n          <Button\n            variant=\"secondary\"\n            className=\"mt-3\"\n            onClick={() => this.copyToClipboard()}\n          >\n            Copy to clipboard\n          </Button>\n        </OverlayTrigger>\n      </>\n    );\n  }\n}\n\nEmbedCodeTextArea.propTypes = {\n  value: PropTypes.string,\n};\n\nEmbedCodeTextArea.defaultProps = {\n  value: '',\n};\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport {\n  Card, Form, Collapse, Col, Row,\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport EmbedCodeTextArea from './EmbedCodeTextArea';\n\nexport default function GetEmbedCode() {\n  const [openCustomize, setOpenCustomize] = useState(false);\n  const [displayTable, setDisplayTable] = useState(true);\n  const handleDisplayTableClick = () => setDisplayTable(!displayTable);\n\n  return (\n    <>\n      <h2>Get embed code</h2>\n\n      {/* <h3><strong>Step 1:</strong> Prepare the spreadsheet</h3> */}\n      <Card className=\"mb-3\">\n        <Card.Header>\n          <strong>Step 1:</strong> Prepare spreadsheet\n        </Card.Header>\n        <Card.Body>\n          <Card.Text>\n            Create a Google Sheets spreadsheet and fill it with data according to the{' '}\n            <Link to=\"/#specs\">specification</Link>.\n          </Card.Text>\n          <Card.Text>\n            Choose <strong>File</strong> &gt; <strong>Publish to the web</strong>{' '}\n            in Google Sheets to allow the spreadsheet to be publicly readable and copy the link.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n\n      {/* <h3><strong>Step 2:</strong> Generate embed code</h3> */}\n      <Card className=\"mb-3\">\n        <Card.Header>\n          {/* <strong>Step 2:</strong> Generate embed code */}\n          <strong>Step 2:</strong> Setup data source\n        </Card.Header>\n        <Card.Body>\n          <Form>\n            <Form.Group controlId=\"spreadsheetUrl\">\n              <Form.Label>\n                Paste public spreadsheet link from{' '}\n                <strong>File</strong> &gt; <strong>Publish to the web</strong>{' '}\n                dialog in Google Sheets here:\n              </Form.Label>\n              <Form.Control type=\"url\" placeholder=\"Enter URL\" />\n            </Form.Group>\n\n            <Collapse in={openCustomize}>\n              <div id=\"collapse-customize\">\n                <Row className=\"mb-2\">\n                  <Col sm={6} md={4} lg={3} className=\"my-auto\">\n                    <Form.Label htmlFor=\"displayTable\" className=\"mt-2 mb-3\">\n                      Property table visibility:\n                    </Form.Label>\n                  </Col>\n                  <Col sm={6} md={8} lg={4} className=\"my-auto\">\n                    <Form.Check\n                      id=\"displayTable\"\n                      type=\"checkbox\"\n                      label=\"Display table\"\n                      checked={displayTable}\n                      onClick={handleDisplayTableClick}\n                      className=\"mt-2 mb-3\"\n                    />\n                  </Col>\n                  <Col sm={6} md={4} lg={2} className=\"my-auto\">\n                    <Form.Label htmlFor=\"language\" className=\"mt-2 mb-3\">\n                      Language:\n                    </Form.Label>\n                  </Col>\n                  <Col sm={6} md={8} lg={3}>\n                    <Form.Control id=\"language\" as=\"select\">\n                      <option value=\"en\">English</option>\n                      <option value=\"lt\">Lithuanian</option>\n                    </Form.Control>\n                  </Col>\n                </Row>\n              </div>\n            </Collapse>\n\n            <LinkContainer to=\"#\">\n              <Card.Link\n                aria-controls=\"collapse-customize\"\n                aria-expanded={openCustomize}\n                onClick={() => setOpenCustomize(!openCustomize)}\n              >\n                Customize embed{' '}\n                <FontAwesomeIcon\n                  icon={openCustomize ? faChevronUp : faChevronDown}\n                  size=\"xs\"\n                />\n              </Card.Link>\n            </LinkContainer>\n          </Form>\n        </Card.Body>\n      </Card>\n\n      {/* <h3><strong>Step 3:</strong>Copy embed code</h3> */}\n      <Card className=\"mb-3\">\n        <Card.Header><strong>Step 3:</strong> Copy generated code</Card.Header>\n        <Card.Body>\n          <EmbedCodeTextArea />\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function Embed() {\n  const { embedParams } = useParams();\n  return (\n    <div className=\"temp-border\">\n      Embed params:\n      {embedParams}\n    </div>\n  );\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\nimport EmbedCodeTextArea from './EmbedCodeTextArea';\nimport './Example.scss';\n\nexport default function Example() {\n  const examples = [\n    {\n      title: 'Responsive Embed 2x3',\n      spreadsheetId: '2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg',\n      embedCode: '<div class=\"zm\"><iframe src=\"https://evaldasstu.github.io/zonalmaps/embed/2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg\" frameborder=\"0\"></iframe><style>.zm {position: relative; padding-bottom: 150%; height: 0; overflow: hidden; max-width: 100%} .zm iframe {position: absolute; top: 0; left: 0; width: 100%; height: 100%}</style></div>',\n    },\n    {\n      title: 'Fixed-size Embed 640x480',\n      spreadsheetId: '2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg',\n      embedCode: '<iframe width=\"640\" height=\"480\" src=\"https://evaldasstu.github.io/zonalmaps/embed/2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg\" frameborder=\"0\"></iframe>',\n    },\n    {\n      title: 'Fixed-size Embed 640x960',\n      spreadsheetId: '2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg',\n      embedCode: '<iframe width=\"640\" height=\"960\" src=\"https://evaldasstu.github.io/zonalmaps/embed/2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg\" frameborder=\"0\"></iframe>',\n    },\n  ];\n  const { exampleNo } = useParams();\n  const example = examples[exampleNo - 1];\n  const spreadsheetEmbedCodePrefix = 'https://docs.google.com/spreadsheets/d/e/';\n  const spreadsheetEmbedCodeSuffix = '/pubhtml?gid=0&amp;single=true&amp;widget=true&amp;headers=false';\n  const spreadsheetEmbedCode = spreadsheetEmbedCodePrefix + example.spreadsheetId\n    + spreadsheetEmbedCodeSuffix;\n\n  return (\n    <>\n      <h2>\n        Example {exampleNo}<br />\n        <small className=\"text-muted\">{example.title}</small>\n      </h2>\n      <div dangerouslySetInnerHTML={{ __html: example.embedCode }} />\n      <h3 className=\"mt-4\">Embed code</h3>\n      <EmbedCodeTextArea value={example.embedCode} />\n      <h3 className=\"mt-4\">Source data</h3>\n      <div className=\"spreadsheetEmbed\">\n        <iframe title=\"Source data\" src={spreadsheetEmbedCode} />\n      </div>\n      <Button variant=\"secondary\" className=\"mt-3\">Open in Google Sheets</Button>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport ReactMarkdown from 'react-markdown';\nimport ReadMe from '../README.md';\nimport Menu from './components/Menu';\nimport GetEmbedCode from './components/GetEmbedCode';\nimport Embed from './components/Embed';\nimport Example from './components/Example';\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Container className=\"my-4\">\n        <Switch>\n          <Route path=\"/embed/:embedParams\" />\n          <Route path=\"/\">\n            {/* All other routes */}\n            <Menu />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/example/:exampleNo\">\n            <Example />\n          </Route>\n          <Route exact path=\"/embed\">\n            <GetEmbedCode />\n          </Route>\n        </Switch>\n      </Container>\n      <Switch>\n        <Route path=\"/embed/:embedParams\">\n          <Embed />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <ReactMarkdown source={ReadMe} />\n  );\n}\n","export default \"This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\\n\\n## Available Scripts\\n\\nIn the project directory, you can run:\\n\\n### `npm start`\\n\\nRuns the app in the development mode.<br />\\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\\n\\nThe page will reload if you make edits.<br />\\nYou will also see any lint errors in the console.\\n\\n### `npm test`\\n\\nLaunches the test runner in the interactive watch mode.<br />\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\\n\\n### `npm run build`\\n\\nBuilds the app for production to the `build` folder.<br />\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\\n\\nThe build is minified and the filenames include the hashes.<br />\\nYour app is ready to be deployed!\\n\\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\\n\\n### `npm run eject`\\n\\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\\n\\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\\n\\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\\n\\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\\n\\n## Learn More\\n\\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\\n\\nTo learn React, check out the [React documentation](https://reactjs.org/).\\n\\n### Code Splitting\\n\\nThis section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting\\n\\n### Analyzing the Bundle Size\\n\\nThis section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size\\n\\n### Making a Progressive Web App\\n\\nThis section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\\n\\n### Advanced Configuration\\n\\nThis section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration\\n\\n### Deployment\\n\\nThis section has moved here: https://facebook.github.io/create-react-app/docs/deployment\\n\\n### `npm run build` fails to minify\\n\\nThis section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify\\n\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}