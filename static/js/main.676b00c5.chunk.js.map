{"version":3,"sources":["components/Header/Header.jsx","components/Footer/Footer.jsx","pages/HowToUse/HowToUse.jsx","../README.md","components/AnimatedContainer/AnimatedContainer.jsx","components/Message/Message.jsx","components/TextArea/TextArea.jsx","components/InfoPopover/InfoPopover.jsx","utils/generateEmbedCode.js","pages/GetEmbedCode/GetEmbedCode.jsx","components/Embed/Embed.jsx","pages/Example/Example.jsx","utils/analytics.js","App.js","index.js"],"names":["Header","Navbar","variant","bg","className","to","Brand","icon","faGlobeEurope","size","Nav","exact","Link","NavDropdown","title","id","Item","active","href","faGithub","Footer","flatten","text","child","Children","toArray","props","children","reduce","HeadingRenderer","level","slug","toLowerCase","replace","createElement","ImageRenderer","value","parsedHtml","DOMParser","parseFromString","src","images","width","propTypes","PropTypes","number","isRequired","arrayOf","object","string","HowToUse","Card","Body","source","renderers","heading","html","animationConfig","stretch","mass","tension","friction","fade","AnimatedContainer","isExpanded","ref","useRef","useState","left","top","height","bounds","setBounds","ResizeObserver","entry","contentRect","observer","useEffect","current","observe","disconnect","useMeasure","bindHeight","measuredHeight","useSpring","from","config","opacity","div","style","defaultProps","icons","danger","faExclamationCircle","info","faFan","spin","warning","faExclamationTriangle","success","faCheckCircle","Message","type","dismissible","selfDestructive","dismiss","message","right","duration","onRest","setAnimationParams","handleClose","Alert","onClose","TextArea","embedCode","copySuccess","setCopySuccess","textArea","Form","Label","htmlFor","srOnly","Control","as","length","readOnly","element","onClick","select","document","execCommand","faCopy","InfoPopover","popoverOpen","setPopoverOpen","isOpen","onClickOutside","containerClassName","padding","content","Button","faQuestionCircle","generateEmbedCode","spreadsheetId","language","displayList","extraOptions","window","location","origin","process","messages","invalidUrl","progress","GetEmbedCode","spreadsheetUrl","setSpreadsheetUrl","setSpreadsheetId","setupMessage","setSetupMessage","customizeIsActive","setCustomizeIsActive","setLanguage","setDisplayList","displayEmbed","setDisplayEmbed","connectGoogleSheetsApi","Text","Boolean","onSubmit","event","preventDefault","onChange","target","extractedSpreadsheetId","RegExp","exec","placeholder","Row","Col","xs","lg","Check","label","checked","disabled","faChevronUp","faChevronDown","dangerouslySetInnerHTML","__html","Embed","useParams","queryString","parse","useLocation","search","list","Example","exampleNo","example","spreadsheetPublishUrl","faExternalLinkAlt","ReactGA","initialize","App","pageview","pathname","usePageView","path","Container","xl","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.676b00c5.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobeEurope } from '@fortawesome/free-solid-svg-icons';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport './Header.scss';\n\nconst Header = () => (\n  <Navbar variant=\"dark\" bg=\"dark\" className=\"rounded mb-4 flex-column flex-md-row\">\n    <LinkContainer to=\"/\">\n      <Navbar.Brand className=\"align-self-start\">\n        <FontAwesomeIcon icon={faGlobeEurope} size=\"lg\" className=\"mr-2\" />\n        Zonal Maps\n      </Navbar.Brand>\n    </LinkContainer>\n    <Nav className=\"mr-auto flex-column flex-md-row\">\n      <LinkContainer exact to=\"/\">\n        <Nav.Link>How to use</Nav.Link>\n      </LinkContainer>\n      <NavDropdown title=\"Examples\" id=\"basic-nav-dropdown\">\n        <LinkContainer to=\"/example/1\">\n          <NavDropdown.Item>Example Map 1</NavDropdown.Item>\n        </LinkContainer>\n        <LinkContainer to=\"/example/2\">\n          <NavDropdown.Item>Example Map 2</NavDropdown.Item>\n        </LinkContainer>\n        <LinkContainer to=\"/example/3\">\n          <NavDropdown.Item>Example Map 3</NavDropdown.Item>\n        </LinkContainer>\n      </NavDropdown>\n      <LinkContainer to=\"/embed\">\n        {/* https://github.com/react-bootstrap/react-router-bootstrap/issues/242#issuecomment-480330910 */}\n        <Nav.Link active={false}>Get embed code</Nav.Link>\n      </LinkContainer>\n    </Nav>\n    <Nav className=\"align-self-start\">\n      <Nav.Link href=\"https://github.com/evaldasstu/zonalmaps\">\n        <FontAwesomeIcon icon={faGithub} className=\"mr-1\" />\n        GitHub\n      </Nav.Link>\n    </Nav>\n  </Navbar>\n);\n\nexport default Header;\n","import React from 'react';\nimport './Footer.scss';\n\nconst Footer = () => (\n  <footer>\n    <small>\n      Copyright © 2020 Evaldas Stulgaitis. Licensed under the{' '}\n      <a href=\"https://mit-license.org/\">MIT license</a>.\n    </small>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Children, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\nimport ReadMe from '../../../README.md';\nimport './HowToUse.scss';\n\n// Render heading anchors for section links\nfunction flatten(text, child) {\n  return typeof child === 'string'\n    ? text + child\n    : Children.toArray(child.props.children).reduce(flatten, text);\n}\n\nfunction HeadingRenderer(props) {\n  const { level } = props;\n  const { children } = props;\n  const slug = Children.toArray(children).reduce(flatten, '').toLowerCase().replace(/\\W/g, '-');\n  return createElement(`h${level}`, { id: slug }, children);\n}\n\nHeadingRenderer.propTypes = {\n  level: PropTypes.number.isRequired,\n  children: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\n// Remove 'public/' from image paths\nfunction ImageRenderer(props) {\n  const { value } = props;\n  const parsedHtml = new DOMParser().parseFromString(value, 'text/html');\n  const src = parsedHtml.images[0].src.replace('public/', '');\n  const { width } = parsedHtml.images[0];\n  return createElement('img', { src, width, className: 'img-fluid mb-4' });\n}\n\nImageRenderer.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nconst HowToUse = () => (\n  <>\n    <h1>How to use</h1>\n    <Card className=\"how-to-use\">\n      <Card.Body>\n        <ReactMarkdown\n          source={ReadMe}\n          renderers={{ heading: HeadingRenderer, html: ImageRenderer }}\n        />\n      </Card.Body>\n    </Card>\n  </>\n);\n\nexport default HowToUse;\n","export default \"# Zonal Maps\\n\\nhttps://evaldasstu.github.io/zonalmaps\\n\\n![Build and deploy CI](https://github.com/evaldasstu/zonalmaps/workflows/Build%20and%20deploy%20CI/badge.svg)\\n\\n## Overview\\n\\nZonal Maps creates embeddable maps with location markers using data from [Google Sheets](https://www.google.com/sheets/about/) spreadsheets. It has a powerful **zoning feature** which allows assigning object sets to geographical areas and automatically displays boundaries of such zones.\\n\\nTo do: add zoning visual?\\n\\nThis project was developed to simplify a process of creating commercial real estate property maps and to provide an easy to learn and convenient way of content update.\\n\\nZonal Maps is built with [React](https://reactjs.org) and uses map data provided by [OpenStreetMap contributors](https://www.openstreetmap.org/copyright). To do: clarify.\\n\\nTo do: add visuals.\\n\\n## Examples\\n\\n- [Link to Example Map 1](https://evaldasstu.github.io/zonalmaps/example/1)\\n- [Link to Example Map 2](https://evaldasstu.github.io/zonalmaps/example/2)\\n- [Link to Example Map 3](https://evaldasstu.github.io/zonalmaps/example/3)\\n\\n## Prepare a spreadsheet\\n\\n[Create a spreadsheet](https://sheet.new/) on Google Sheets. To do: add more.\\n\\n### Spreadsheet specification\\n\\nThe simplest possible spreadsheet that could be understood by Zonal Maps would look like this:\\n\\n<img src=\\\"./public/readme/spreadsheet-screenshot-927427.png\\\" alt=\\\"Spreadsheet screenshot\\\" width=\\\"175\\\" />\\n\\nPasting a link to this spreadhsheat into [Get embed code](https://evaldasstu.github.io/zonalmaps/embed) form would result a map centered around a single marked point. `Coordinates` is the only required _attribute_ in the spreadsheet, but there can be more of them.\\n\\nAttributes can be freely named, except `Coordinates` and `Zone`, which are [special attributes](#special-attributes). All attributes must reside in spreadsheet's Row 1. Each subsequent row represents a location displayed on the map. There is no need for a list numbering attribute, as numbers are assigned automatically.\\n\\nThis is an example of a bit more complex spreadsheet, which includes [`Zone`](#zone), another special attribute:\\n\\n<img src=\\\"./public/readme/spreadsheet-screenshot-374628.png\\\" alt=\\\"Spreadsheet screenshot\\\" width=\\\"588\\\" />\\n\\n#### Special attributes\\n\\nSpecial attribute names are presented in uppercase form to keep consistency with custom attributes, however they are case–insensitive. Special attributes are not displayed in location lists.\\n\\n| Special attribute | Required | Example value             |\\n| :---------------- | :------- | :------------------------ |\\n| `Coordinates`     | +        | `54.698415, 25.271016`    |\\n| `Zone`            |          | Central Business District |\\n\\n##### `Coordinates`\\n\\nGeographical coordinates are expected to be provided in Decimal degrees (DD) format. First number is for latitude, second is for longitude. For the example above, numbers for the example value have been conveniently copied from Google Maps, however four decimal places (`54.6984, 25.2710`) would suffice for most practical purposes. Space between latitude and longitude is optional, numbers must be comma–separated.\\n\\n##### `Zone`\\n\\nThis attribute is used to assign objects to groups for displaying boundaries around geographic areas.\\n\\nTo do: add more.\\n\\n#### Sheets\\n\\n| Sheet name     | Required | Notes                                                 |\\n| :------------- | :------- | :---------------------------------------------------- |\\n| `Data`         | +        | Can have any name when no other sheets are present    |\\n| `Translations` |          | See [Multilingual embeds](#multilingual-embeds) below |\\n\\n#### Multilingual embeds\\n\\nIf there is a need to offer map versions in more than one language, it is possible to provide attribute translations in the same spreadsheet. In such case, the main sheet of the spreadsheet containing the list of locations will have to be named `Data`, while another sheet named `Translations` will have to be created.\\n\\nOpen [this spreadsheet](https://docs.google.com/spreadsheets/d/1hEG0yonVRlBs50UNzGc2uiv6pBJyzY1mQczfINHwnEM/edit?usp=sharing), which is the source for [Example 1](https://evaldasstu.github.io/zonalmaps/example/1) and check `Translations` sheet to see how multilingual map versions can be implemented.\\n\\nWhen [Get embed code](https://evaldasstu.github.io/zonalmaps/embed) form is provided with a link to a spreadsheet containing multilingual attributes, **Language** option gets enabled in **Customize embed** setting panel. All languages that are set in the spreadsheet appear in the dropdown menu.\\n\\nTo do: more on locale and numbers?\\n\\n### Share the spreadsheet\\n\\nIn Google Sheets, choose **File** > **Share**, select **Copy link** and change **Restricted** to **Anyone with the link** to allow the spreadsheet to be publicly readable. The spreadsheet will have to remain public for the embed to work.\\n\\n## Get embed code\\n\\nNavigate to [Get Embed Code](https://evaldasstu.github.io/zonalmaps/embed) to access the embed code generator. To do: add more on pasting the link and something more.\\n\\nIt should be relatively easy to use such embed code by adding it if you have access to website's HTML code. `<style>` tag is included in the embed code to make the content responsively fit its container.\\n\\n##### Example embed code:\\n\\n> `<div class=\\\"zm\\\"><iframe src=\\\"https://evaldasstu.github.io/zonalmaps/embed/1hEG0yonVRlBs50UNzGc2uiv6pBJyzY1mQczfINHwnEM\\\" frameborder=\\\"0\\\"></iframe><style>.zm {position: relative; padding-bottom: 150%; height: 0; overflow: hidden; max-width: 100%} .zm iframe {position: absolute; top: 0; left: 0; width: 100%; height: 100%}</style></div>`\\n\\n### Customize embed\\n\\nIf attribute translations are provided in the spreadsheet, language can be changed by choosing **Customize embed** and selecting **Language**. See [Multilingual embeds](#multilingual-embeds) for details.\\n\\nBy default, Zonal Maps displays a location list as a sortable table below the map. If this functionality is not needed, list display can be turned off by choosing **Customize embed** and unchecking **Display location list**.\\n\\n## Use embed code\\n\\n### Embedding in WordPress\\n\\nTo add an embed to a [WordPress](https://wordpress.org) website using Block Editor (default since version 5.0), add a **Custom HTML** block and paste the embed code.\\n\\nWhen using the Classic Editor or pre–Gutenberg WordPress, switch to **Text** tab of the editor and paste the embed code.\\n\\n## Browser support\\n\\nFollowing browsers are supported for correct embed rendering:\\n\\n| Desktop              | Mobile             |\\n| :------------------- | :----------------- |\\n| Chrome               | Chrome             |\\n| Firefox              | Firefox            |\\n| Safari 5+ (Mac only) | Safari 7+          |\\n| Opera 12+            | Android Browser 5+ |\\n| IE 10+               |                    |\\n| Edge                 |                    |\\n\\n## Development\\n\\nProject source code is stored in a public GitHub repository at https://github.com/evaldasstu/zonalmaps.\\n\\nThis project is based on Create React App. Standard `npm start`, `npm test`, `npm run build` scripts are available in a Node.js development environment. More on this [here](https://create-react-app.dev/docs/available-scripts).\\n\\nTo do: add more on integration, branches, GitHub's encrypted secrets, Google Sheets API code.\\n\\n### Deployment\\n\\nProject's `package.json` is configured for deployment to GitHub Pages using `npm run deploy` script.\\n\\n## Acknowledgements\\n\\nZonal Maps runs using:\\n\\n- [React](https://reactjs.org)\\n- [OpenStreetMap](https://openstreetmap.org) via [Mapbox](https://mapbox.com)\\n- [Google Sheets API](https://developers.google.com/sheets/api)\\n\\nAs well as with the help of [Bootstrap](https://getbootstrap.com), [Sass](https://sass-lang.com), [react-spring](https://www.react-spring.io/), [Jest](https://jestjs.io) and other packages. For full list, check the [dependency graph](https://github.com/evaldasstu/zonalmaps/network/dependencies).\\n\\n## License\\n\\nZonal Maps is open source software licensed under the MIT license.  \\nCopyright © 2020 Evaldas Stulgaitis\\n\";","import React, { useState, useRef, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport PropTypes from 'prop-types';\nimport { animated, useSpring } from 'react-spring';\nimport './AnimatedContainer.scss';\n\nconst useMeasure = () => {\n  const ref = useRef();\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n  });\n\n  // Get own height for performing stretch animation\n  const [observer] = useState(() => new ResizeObserver(([entry]) => setBounds(entry.contentRect)));\n\n  useEffect(() => {\n    if (ref.current) observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [observer]);\n  return [{ ref }, bounds];\n};\n\nconst animationConfig = {\n  stretch: {\n    mass: 0.2,\n    tension: 150,\n    friction: 10,\n  },\n  fade: {\n    tension: 100,\n  },\n};\n\nconst AnimatedContainer = ({ children, isExpanded }) => {\n  const [bindHeight, { height: measuredHeight }] = useMeasure();\n\n  // Container height stretch\n  const { height } = useSpring({\n    from: { height: 0 },\n    to: { height: isExpanded ? measuredHeight : 0 },\n    config: animationConfig.stretch,\n  });\n\n  // Contents fade-in\n  const { opacity } = useSpring({\n    from: { opacity: 0 },\n    to: { opacity: isExpanded ? 1 : 0 },\n    config: animationConfig.fade,\n  });\n\n  return (\n    <animated.div style={{ height, opacity }} className=\"zm-animated-container\">\n      <div ref={bindHeight.ref}>{children}</div>\n    </animated.div>\n  );\n};\n\nAnimatedContainer.propTypes = {\n  children: PropTypes.element,\n  isExpanded: PropTypes.bool.isRequired,\n};\n\nAnimatedContainer.defaultProps = {\n  children: null,\n};\n\nexport default AnimatedContainer;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faExclamationCircle,\n  faExclamationTriangle,\n  faCheckCircle,\n  faFan,\n} from '@fortawesome/free-solid-svg-icons';\nimport { animated, useSpring } from 'react-spring';\nimport './Message.scss';\n\nconst icons = {\n  danger: <FontAwesomeIcon icon={faExclamationCircle} />,\n  info: <FontAwesomeIcon icon={faFan} spin />,\n  warning: <FontAwesomeIcon icon={faExclamationTriangle} />,\n  success: <FontAwesomeIcon icon={faCheckCircle} />,\n};\n\nconst Message = ({ type, text, dismissible, selfDestructive, dismiss }) => {\n  const message = useRef();\n\n  const [props, setAnimationParams] = useSpring(() => ({\n    from: { right: '100%' },\n    to: { right: '0%' },\n    config: { duration: 3000 },\n\n    // Progress bar animation completion callback\n    onRest: () => {\n      if (message.current) {\n        dismiss();\n      }\n    },\n  }));\n\n  // Closing message speeds up self-destruct\n  const speedUp = () => {\n    setAnimationParams({ config: { duration: 200 } });\n  };\n\n  const handleClose = () => {\n    if (selfDestructive) {\n      speedUp();\n    } else {\n      dismiss();\n    }\n  };\n\n  return (\n    <Alert\n      variant={type}\n      className=\"d-flex\"\n      dismissible={dismissible}\n      onClose={() => handleClose()}\n      ref={message}\n    >\n      {icons[type]}\n      {text}\n      {selfDestructive && <animated.div className=\"zm-progress-bar\" style={props} />}\n    </Alert>\n  );\n};\n\nMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  dismissible: PropTypes.bool,\n  selfDestructive: PropTypes.bool,\n  dismiss: PropTypes.func,\n};\n\nMessage.defaultProps = {\n  dismissible: false,\n  selfDestructive: false,\n  dismiss: () => {},\n};\n\nexport default Message;\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy } from '@fortawesome/free-regular-svg-icons';\nimport AnimatedContainer from '../AnimatedContainer/AnimatedContainer';\nimport Message from '../Message/Message';\nimport './TextArea.scss';\n\nconst TextArea = ({ embedCode }) => {\n  const [copySuccess, setCopySuccess] = useState(false);\n  let textArea = useRef();\n\n  const copyToClipboard = () => {\n    textArea.select();\n    document.execCommand('copy');\n    setCopySuccess(true);\n  };\n\n  return (\n    <>\n      {/* Successfully copied to clipboard */}\n      {copySuccess && (\n        <AnimatedContainer isExpanded={copySuccess}>\n          <Message\n            type=\"success\"\n            text=\"Embed code copied to clipboard.\"\n            dismiss={() => setCopySuccess(false)}\n            dismissible\n            selfDestructive\n          />\n        </AnimatedContainer>\n      )}\n\n      <code>\n        <Form.Label htmlFor=\"embedCode\" srOnly=\"true\">\n          Embed code\n        </Form.Label>\n        <Form.Control\n          id=\"embedCode\"\n          as=\"textarea\"\n          value={embedCode || 'Waiting for a Google Sheets link...'}\n          className={\n            !embedCode || embedCode.length < 200 ? 'zm-text-area-low' : 'zm-text-area-high'\n          }\n          readOnly\n          ref={(element) => {\n            textArea = element;\n          }}\n        />\n      </code>\n\n      {embedCode ? (\n        // Enabled copy button\n        <Card.Link onClick={copyToClipboard} className=\"d-inline-block mt-4\">\n          Copy to clipboard\n          <FontAwesomeIcon icon={faCopy} size=\"xs\" />\n        </Card.Link>\n      ) : (\n        // Disabled copy button\n        <Card.Link className=\"d-inline-block mt-4 zm-card-link-disabled\">\n          Copy to clipboard\n          <FontAwesomeIcon icon={faCopy} size=\"xs\" />\n        </Card.Link>\n      )}\n    </>\n  );\n};\n\nTextArea.propTypes = {\n  embedCode: PropTypes.string,\n};\n\nTextArea.defaultProps = {\n  embedCode: '',\n};\n\nexport default TextArea;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport Popover from 'react-tiny-popover';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\nimport './InfoPopover.scss';\n\nconst InfoPopover = ({ children }) => {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  return (\n    <Popover\n      isOpen={popoverOpen}\n      onClickOutside={() => setPopoverOpen(!popoverOpen)}\n      containerClassName=\"popover\"\n      padding={0}\n      content={<div className=\"popover-body\">{children}</div>}\n    >\n      <div className=\"zm-info-trigger\">\n        <Button variant=\"link\" className=\"pr-0\" onClick={() => setPopoverOpen(!popoverOpen)}>\n          <FontAwesomeIcon icon={faQuestionCircle} size=\"xs\" />\n        </Button>\n      </div>\n    </Popover>\n  );\n};\n\nexport default InfoPopover;\n\nInfoPopover.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","const generateEmbedCode = ({ spreadsheetId, language = 'en', displayList = 'true' }) => {\n  const iframePrefix = '<div class=\"zm\"><iframe src=\"';\n  const iframeSuffix =\n    '\" frameborder=\"0\"></iframe><style>.zm {position: relative; padding-bottom: 150%; height: 0; overflow: hidden; max-width: 100%} .zm iframe {position: absolute; top: 0; left: 0; width: 100%; height: 100%}</style></div>';\n\n  // Serialize parameters for URL string\n  let extraOptions = '';\n  if (!displayList) {\n    extraOptions = '?list=0';\n  } else if (language !== 'en') {\n    extraOptions = `?lang=${language}`;\n  }\n  if (!displayList && language !== 'en') {\n    extraOptions = `?list=0&lang=${language}`;\n  }\n\n  const embedCode = `${iframePrefix}${window.location.origin}${process.env.PUBLIC_URL}/embed/${spreadsheetId}${extraOptions}${iframeSuffix}`;\n\n  return spreadsheetId ? embedCode : null;\n};\n\nexport default generateEmbedCode;\n","import React, { useState } from 'react';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport { Card, Form, Col, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\n\nimport AnimatedContainer from '../../components/AnimatedContainer/AnimatedContainer';\nimport Message from '../../components/Message/Message';\nimport TextArea from '../../components/TextArea/TextArea';\nimport InfoPopover from '../../components/InfoPopover/InfoPopover';\nimport generateEmbedCode from '../../utils/generateEmbedCode';\nimport './GetEmbedCode.scss';\n\nconst messages = {\n  invalidUrl: {\n    type: 'danger',\n    text: 'Input does not seem to be a valid Google Sheets URL.',\n  },\n  progress: {\n    type: 'info',\n    text: 'Connecting to Google Sheets...',\n  },\n  warning: {\n    type: 'warning',\n    text: 'Input does not seem to be a valid Google Sheets URL.',\n  },\n  success: {\n    type: 'success',\n    text: 'Spreadsheet data received successfully.',\n    dismissible: true,\n    selfDestructive: true,\n  },\n};\n\nconst GetEmbedCode = () => {\n  const [spreadsheetUrl, setSpreadsheetUrl] = useState('');\n  const [spreadsheetId, setSpreadsheetId] = useState(null);\n  const [setupMessage, setSetupMessage] = useState(null);\n  const [customizeIsActive, setCustomizeIsActive] = useState(false);\n  const [language, setLanguage] = useState('en');\n  const [displayList, setDisplayList] = useState(true);\n  const [displayEmbed, setDisplayEmbed] = useState(false);\n\n  const handleSuccessfulConnection = () => {\n    setSetupMessage('success');\n    setDisplayEmbed(true);\n  };\n\n  const connectGoogleSheetsApi = () => {\n    // Connect call placeholder\n    handleSuccessfulConnection();\n  };\n\n  // Extract spreadsheet ID from URL\n  const handleSpreadsheetUrlChange = (event) => {\n    setSpreadsheetUrl(event.target.value);\n    let extractedSpreadsheetId = RegExp('/spreadsheets/d/([a-zA-Z0-9-_]+)').exec(\n      event.target.value,\n    );\n    extractedSpreadsheetId = extractedSpreadsheetId ? extractedSpreadsheetId[1] : null;\n    if (event.target.value && extractedSpreadsheetId) {\n      setSetupMessage('progress');\n      connectGoogleSheetsApi();\n    } else if (event.target.value && !spreadsheetId) {\n      setSetupMessage('invalidUrl');\n      setDisplayEmbed(false);\n    } else {\n      // On clearing input field\n      setSetupMessage(null);\n      setDisplayEmbed(false);\n    }\n    setSpreadsheetId(extractedSpreadsheetId);\n  };\n\n  return (\n    <>\n      <h1>Get embed code</h1>\n\n      <Card>\n        <Card.Header>\n          <strong>Step 1:</strong> Prepare a spreadsheet\n        </Card.Header>\n        <Card.Body>\n          <Card.Text>\n            Create a Google Sheets spreadsheet and fill it with data according to the{' '}\n            <Link to=\"/#spreadsheet-specification\">specification</Link>.\n          </Card.Text>\n          <Card.Text>\n            Choose <strong>File</strong> &gt; <strong>Share</strong>, select{' '}\n            <strong>Copy link</strong> and change <strong>Restricted</strong> to{' '}\n            <strong>Anyone with the link</strong> in Google Sheets to allow the spreadsheet to be\n            publicly readable.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n\n      <Card className=\"mt-3\">\n        <Card.Header>\n          <strong>Step 2:</strong> Generate embed code\n        </Card.Header>\n        <Card.Body>\n          <AnimatedContainer isExpanded={Boolean(setupMessage)}>\n            {setupMessage ? (\n              <Message\n                type={messages[setupMessage].type}\n                text={messages[setupMessage].text}\n                dismissible={messages[setupMessage].dismissible}\n                selfDestructive={messages[setupMessage].selfDestructive}\n                dismiss={() => setSetupMessage(null)}\n              />\n            ) : null}\n          </AnimatedContainer>\n\n          {/* Prevent form submission on Enter */}\n          <Form\n            onSubmit={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <Form.Label htmlFor=\"spreadsheetUrl\">Paste a public spreadsheet link here:</Form.Label>\n            <Form.Control\n              id=\"spreadsheetUrl\"\n              value={spreadsheetUrl}\n              onChange={handleSpreadsheetUrlChange}\n              type=\"text\"\n              placeholder=\"Enter URL\"\n            />\n          </Form>\n\n          <AnimatedContainer isExpanded={customizeIsActive}>\n            <Card bg=\"light border-0 mt-3\">\n              <Card.Body>\n                <Form>\n                  <Row>\n                    <Col xs={4} className=\"my-auto d-lg-none py-2\">\n                      <Form.Label htmlFor=\"displayList\" className=\"mb-0\">\n                        List\n                      </Form.Label>\n                    </Col>\n\n                    <Col xs={8} lg=\"auto\" className=\"my-auto py-2\">\n                      <Form.Check\n                        id=\"displayList\"\n                        type=\"checkbox\"\n                        label=\"Display location list\"\n                        checked={displayList}\n                        onChange={() => {\n                          setDisplayList(!displayList);\n                        }}\n                      />\n                    </Col>\n\n                    {/* Fluid spacer column for horizontal layout */}\n                    <Col lg />\n\n                    {/* Spacer row for vertical layout */}\n                    <Col xs={12} className=\"d-lg-none my-1\" />\n\n                    <Col xs={4} lg=\"auto\" className=\"my-auto\">\n                      <Form.Label htmlFor=\"language\" className=\"mb-0\">\n                        Language\n                      </Form.Label>\n                    </Col>\n\n                    <Col xs={8} lg={3} className=\"d-flex align-items-center\">\n                      <Form.Control\n                        id=\"language\"\n                        as=\"select\"\n                        disabled\n                        onChange={(event) => setLanguage(event.target.value)}\n                      >\n                        <option value=\"en\">English</option>\n                      </Form.Control>\n                      <InfoPopover>\n                        <span>\n                          How to use: <Link to=\"/#multilingual-embeds\">Multilingual embeds</Link>\n                        </span>\n                      </InfoPopover>\n                    </Col>\n                  </Row>\n                </Form>\n              </Card.Body>\n            </Card>\n          </AnimatedContainer>\n\n          <Card.Link\n            onClick={() => setCustomizeIsActive(!customizeIsActive)}\n            className=\"d-inline-block mt-4\"\n          >\n            Customize embed\n            <FontAwesomeIcon icon={customizeIsActive ? faChevronUp : faChevronDown} size=\"xs\" />\n          </Card.Link>\n        </Card.Body>\n      </Card>\n\n      <Card className={spreadsheetId ? 'mt-3' : 'mt-3 zm-muted'}>\n        <Card.Header>\n          <strong>Step 3:</strong> Copy generated code\n        </Card.Header>\n        <Card.Body>\n          <TextArea\n            embedCode={generateEmbedCode({\n              spreadsheetId,\n              language,\n              displayList,\n            })}\n          />\n        </Card.Body>\n      </Card>\n\n      <h2 className={displayEmbed ? 'zm-embed-title' : 'zm-embed-title zm-muted'}>Embed output</h2>\n      {!displayEmbed ? (\n        <p className=\"zm-waiting-label zm-muted\">Embed preview will load here...</p>\n      ) : (\n        <div\n          dangerouslySetInnerHTML={{\n            __html: generateEmbedCode({ spreadsheetId, language, displayList }),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GetEmbedCode;\n","import React from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport queryString from 'query-string'; // keep at v^5 for legacy browser support\n\nconst Embed = () => {\n  const { spreadsheetId } = useParams();\n  // Display list unless URL contains ?list=0\n  const displayList = !(queryString.parse(useLocation().search).list === '0') && true;\n  return (\n    <>\n      <div className=\"border\">\n        Spreadsheet ID: {spreadsheetId}\n        <br />\n        Map placeholder\n      </div>\n      {displayList && <div className=\"border mt-4\">List placeholder</div>}\n    </>\n  );\n};\n\nexport default Embed;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\nimport TextArea from '../../components/TextArea/TextArea';\nimport generateEmbedCode from '../../utils/generateEmbedCode';\nimport './Example.scss';\n\nconst Example = () => {\n  // title: temp\n  // spreadsheetPublishUrl: possibly also temp\n  const examples = [\n    {\n      title: 'Example 1 Title',\n      spreadsheetId: '1hEG0yonVRlBs50UNzGc2uiv6pBJyzY1mQczfINHwnEM',\n      spreadsheetPublishUrl:\n        'https://docs.google.com/spreadsheets/d/e/2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg/pubhtml',\n    },\n    {\n      title: 'Example 2 Title',\n      spreadsheetId: '1hEG0yonVRlBs50UNzGc2uiv6pBJyzY1mQczfINHwnEM',\n      spreadsheetPublishUrl:\n        'https://docs.google.com/spreadsheets/d/e/2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg/pubhtml',\n    },\n    {\n      title: 'Example 3 Title',\n      spreadsheetId: '1hEG0yonVRlBs50UNzGc2uiv6pBJyzY1mQczfINHwnEM',\n      spreadsheetPublishUrl:\n        'https://docs.google.com/spreadsheets/d/e/2PACX-1vTQhSNDZHmt2bCca8hpeSe_bLtFSkqLttRO06RJk_JpDpk0jb0uW0co5acE_toHzHFZxZsPXGFHYXsg/pubhtml',\n    },\n  ];\n\n  // Select example data by URL parameter\n  const { exampleNo } = useParams();\n  const example = examples[exampleNo - 1];\n\n  return (\n    <>\n      <h1>\n        Example {exampleNo}\n        <br />\n        <small className=\"text-muted\">{example.title}</small>\n      </h1>\n      <div\n        dangerouslySetInnerHTML={{\n          __html: generateEmbedCode({ spreadsheetId: example.spreadsheetId }),\n        }}\n      />\n\n      <Card className=\"mt-4\">\n        <Card.Header>Embed code</Card.Header>\n        <Card.Body>\n          <TextArea\n            embedCode={generateEmbedCode({\n              spreadsheetId: example.spreadsheetId,\n            })}\n          />\n        </Card.Body>\n      </Card>\n\n      {/* Google Sheets iframe */}\n      <Card className=\"mt-4\">\n        <Card.Header>Source spreadsheet</Card.Header>\n        <Card.Body>\n          <div className=\"spreadsheetEmbed\">\n            <iframe title=\"Source data\" src={example.spreadsheetPublishUrl} />\n          </div>\n          <Card.Link href=\"#\" className=\"d-block mt-4\">\n            Open in Google Sheets\n            <FontAwesomeIcon icon={faExternalLinkAlt} size=\"xs\" />\n          </Card.Link>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default Example;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport ReactGA from 'react-ga';\n\n// Init Google Analytics once\nconst initAnalytics = () => {\n  if (process.env.NODE_ENV === 'production') {\n    ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS_TRACKING_ID);\n  }\n};\n\n// Register pageviews\nconst usePageView = () => {\n  const location = useLocation();\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      ReactGA.pageview(process.env.PUBLIC_URL + location.pathname + location.search);\n    }\n  }, [location]);\n};\n\nexport { initAnalytics, usePageView };\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport HowToUse from './pages/HowToUse/HowToUse';\nimport GetEmbedCode from './pages/GetEmbedCode/GetEmbedCode';\nimport Embed from './components/Embed/Embed';\nimport Example from './pages/Example/Example';\n\nimport { initAnalytics, usePageView } from './utils/analytics';\n\ninitAnalytics();\n\nconst App = () => {\n  usePageView();\n  return (\n    <>\n      <Switch>\n        <Route path=\"/embed/:spreadsheetId\">\n          <Embed />\n        </Route>\n        {/* All other routes except /embed/:spreadsheetId */}\n        <Route path=\"/\">\n          <Container className=\"my-4\">\n            <Row className=\"justify-content-center\">\n              <Col xl={10}>\n                <Header />\n                <Switch>\n                  <Route exact path=\"/\">\n                    <HowToUse />\n                  </Route>\n                  <Route path=\"/example/:exampleNo\">\n                    <Example />\n                    <Footer />\n                  </Route>\n                  <Route exact path=\"/embed\">\n                    <GetEmbedCode />\n                    <Footer />\n                  </Route>\n                </Switch>\n              </Col>\n            </Row>\n          </Container>\n        </Route>\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport './scss/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}